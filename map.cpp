/*==============================================================================

   マップ管理 [map.cpp]
	Author :	歐 改造 古市
	Date   :
--------------------------------------------------------------------------------

==============================================================================*/

#include "input.h"
#include "texture.h"
#include "sprite.h"
#include "map.h"
#include "player.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************


//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************


//*****************************************************************************
// グローバル変数
//*****************************************************************************
static	int g_MapTexture = 0;
MAP		g_map;

//=============================================================================
// 初期化処理
//=============================================================================
void InitMap(void)
{
	g_MapTexture = LoadTexture("data/TEXTURE/αMAP.png");

	// マップUV情報
	g_map.u = 0.0f;
	g_map.v = 0.0f;
	g_map.uh = VIEW_SCREEN_WIDTH / MAP_X;
	g_map.vh = VIEW_SCREEN_HEIGHT / MAP_Y;
}

//=============================================================================
// 終了処理
//=============================================================================
void UninitMap(void)
{

}

//=============================================================================
// 更新処理
//=============================================================================
void UpdateMap(void)
{
	ChangeUv();
	//CameraControl();



}

//=============================================================================
// 描画処理
//=============================================================================
void DrawMap(void)
{
	// マップ描画
	DrawSpriteLeftTop(g_MapTexture,
		0.0f, 0.0f,
		SCREEN_WIDTH, SCREEN_HEIGHT,
		g_map.u, g_map.v,
		g_map.uh, g_map.vh);

	// オブジェクト配置を書くならこの辺?

}

void ChangeUv(void)
{
	float u, v;
	PLAYER* player = GetPlayer();

	u = player->pos.x / (MAP_X * 60.0f);
	v = player->pos.y / (MAP_Y * 60.0f);

	// U描画
	if (u < (g_map.uh / 2))
	{
		// 0.33fより小さいとき
		g_map.u = 0.0f;
		player->difference.x = -(((g_map.uh / 2) - u) * (MAP_X * 60.0f));
	}
	else if (u > (1.0f - (g_map.uh / 2)))
	{
		// 0.66fより大きいとき
		g_map.u = 1.0f - g_map.uh;
		player->difference.x = ((u - (1.0f - g_map.uh / 2)) * (MAP_X * 60.0f));
	}
	else
	{
		// それ以外
		g_map.u = u - (g_map.uh / 2);
		player->difference.x = 0.0f;
	}

	// V描画
	if (v < (g_map.vh / 2))
	{
		// 0.25fより小さいとき
		g_map.v = 0.0f;
		player->difference.y = -(((g_map.vh / 2) - v) * (MAP_Y * 60.0f));
	}
	else if (v > (1.0f - (g_map.vh / 2)))
	{
		// 0.75fより大きいとき
		g_map.v = 1.0f - g_map.vh;
		player->difference.y = ((v - (1.0f - g_map.vh / 2)) * (MAP_Y * 60.0f));
	}
	else
	{
		// それ以外
		g_map.v = v - (g_map.vh / 2);
		player->difference.y = 0.0f;
	}
}

void CameraControl(void)
{
	// カメラが右に行き過ぎないように
	if (g_map.u + g_map.uh > 1.0f)
	{
		g_map.u = 1.0f - g_map.uh;
	}

	// カメラが左に行き過ぎないように
	if (g_map.u < 0.0f)
	{
		g_map.u = 0.0f;
	}

	// カメラが下に行き過ぎないように
	if (g_map.v + g_map.vh > 1.0f)
	{
		g_map.v = 1.0f - g_map.vh;
	}

	// カメラが上に行き過ぎないように
	if (g_map.v < 0.0f)
	{
		g_map.v = 0.0f;
	}
}